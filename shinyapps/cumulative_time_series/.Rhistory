shiny::runApp('Dropbox/R/crime_analysis/shinyapps/choropleth_map')
shiny::runApp('Dropbox/R/crime_analysis/shinyapps/choropleth_map')
shiny::runApp('Dropbox/R/crime_analysis/shinyapps/choropleth_map')
shiny::runApp('Dropbox/R/crime_analysis/shinyapps/choropleth_map')
shiny::runApp('Dropbox/R/crime_analysis/shinyapps/choropleth_map')
shiny::runApp('Dropbox/R/crime_analysis/shinyapps/choropleth_map')
shiny::runApp('Dropbox/R/crime_analysis/shinyapps/choropleth_map')
shiny::runApp('Dropbox/R/crime_analysis/shinyapps/choropleth_map')
shiny::runApp('Dropbox/R/crime_analysis/shinyapps/choropleth_map')
shiny::runApp('Dropbox/R/crime_analysis/shinyapps/choropleth_map')
shiny::runApp('Dropbox/R/crime_analysis/shinyapps/choropleth_map')
runGitHub("cat-lord/crime_analysis", subdir = "shinyapps/choropleth_map/")
runGitHub("cat-lord/crime_analysis", subdir = "shinyapps/choropleth_map/")
library(shiny)
runGitHub("cat-lord/crime_analysis", subdir = "shinyapps/choropleth_map/")
shiny::runApp('Dropbox/R/crime_analysis/shinyapps/choropleth_map')
runGitHub("cat-lord/crime_analysis", subdir = "shinyapps/choropleth_map/")
shiny::runApp('Dropbox/R/crime_analysis/shinyapps/choropleth_map')
runGitHub("cat-lord/crime_analysis", subdir = "shinyapps/choropleth_map/")
shiny::runApp('Dropbox/R/crime_analysis/shinyapps/choropleth_map')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/crime_analysis/shinyapps/choropleth_map')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/crime_map')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
runGitHub("cat-lord/crime_analysis", subdir = "shinyapps/choropleth_map/")
runGitHub("cat-lord/crime_analysis", subdir = "shinyapps/choropleth_map/")
runGitHub("cat-lord/crime_analysis", subdir = "shinyapps/choropleth_map/")
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
runGitHub("cat-lord/crime_analysis", subdir = "shinyapps/basic_choropleth_map/")
shiny::runApp('Dropbox/R/Shiny/apps/choropleth')
shiny::runApp('Dropbox/R/Shiny/apps/crime_map')
shiny::runApp('Dropbox/R/Shiny/apps/crime_map')
shiny::runApp('Dropbox/R/Shiny/apps/crime_map')
shiny::runApp('Dropbox/R/Shiny/apps/crime_map')
shiny::runApp('Dropbox/R/Shiny/apps/crime_map')
shiny::runApp('Dropbox/R/Shiny/apps/crime_map')
shiny::runApp('Dropbox/R/Shiny/apps/crime_map')
shiny::runApp('Dropbox/R/Shiny/apps/crime_map')
shiny::runApp('Dropbox/R/Shiny/apps/crime_map')
shiny::runApp('Dropbox/R/Shiny/apps/crime_map')
shiny::runApp('Dropbox/R/Shiny/apps/crime_map')
shiny::runApp('Dropbox/R/Shiny/apps/crime_map')
shiny::runApp('Dropbox/R/Shiny/apps/crime_map')
shiny::runApp('Dropbox/R/Shiny/apps/crime_map')
shiny::runApp('Dropbox/R/Shiny/apps/crime_map')
shiny::runApp('Dropbox/R/Shiny/apps/STATS19_scanner')
shiny::runApp('Dropbox/R/Shiny/apps/STATS19_scanner')
library(shiny)
library(miniUI)
library(ggplot2)
outlier_rm = function(data, xvar, yvar) {
ui = miniPage(
gadgetTitleBar("Drag to select points"),
miniContentPanel(
# The brush="brush" argument means we can listen for
# brush events on the plot using input$brush.
plotOutput("plot", height = "100%", brush = "brush")
)
)
server = function(input, output, session) {
# Render the plot
output$plot = renderPlot({
# Plot the data with x/y vars indicated by the caller.
ggplot(data, aes_string(xvar, yvar)) + geom_point()
})
# Handle the Done button being pressed.
observeEvent(input$done, {
# create id for data
data$id = 1:nrow(data)
# Return the brushed points. See ?shiny::brushedPoints.
p = brushedPoints(data, input$brush)
# create vector of ids that match brushed points and data
g = which(p$id %in% data$id)
# return a subset of the original data without brushed points
stopApp(data[-g,])
})
}
runGadget(ui, server)
}
# run to open plot viewer
# click and drag to brush
# press done return a subset of the original data without brushed points
library(gapminder)
outlier_rm(gapminder, "lifeExp", "gdpPercap")
# you can also use the same method above but pass the output into a dplyr pipe syntax
# without the selection what is the mean life expectancy by country?
library(dplyr)
outlier_rm(gapminder, "lifeExp", "gdpPercap") %>%
group_by(country) %>%
summarise(mean(lifeExp))
install.packages("miniUI")
library(shiny)
library(miniUI)
library(ggplot2)
outlier_rm = function(data, xvar, yvar) {
ui = miniPage(
gadgetTitleBar("Drag to select points"),
miniContentPanel(
# The brush="brush" argument means we can listen for
# brush events on the plot using input$brush.
plotOutput("plot", height = "100%", brush = "brush")
)
)
server = function(input, output, session) {
# Render the plot
output$plot = renderPlot({
# Plot the data with x/y vars indicated by the caller.
ggplot(data, aes_string(xvar, yvar)) + geom_point()
})
# Handle the Done button being pressed.
observeEvent(input$done, {
# create id for data
data$id = 1:nrow(data)
# Return the brushed points. See ?shiny::brushedPoints.
p = brushedPoints(data, input$brush)
# create vector of ids that match brushed points and data
g = which(p$id %in% data$id)
# return a subset of the original data without brushed points
stopApp(data[-g,])
})
}
runGadget(ui, server)
}
# run to open plot viewer
# click and drag to brush
# press done return a subset of the original data without brushed points
library(gapminder)
outlier_rm(gapminder, "lifeExp", "gdpPercap")
# you can also use the same method above but pass the output into a dplyr pipe syntax
# without the selection what is the mean life expectancy by country?
library(dplyr)
outlier_rm(gapminder, "lifeExp", "gdpPercap") %>%
group_by(country) %>%
summarise(mean(lifeExp))
install.packages("gapminder")
library(shiny)
library(miniUI)
library(ggplot2)
outlier_rm = function(data, xvar, yvar) {
ui = miniPage(
gadgetTitleBar("Drag to select points"),
miniContentPanel(
# The brush="brush" argument means we can listen for
# brush events on the plot using input$brush.
plotOutput("plot", height = "100%", brush = "brush")
)
)
server = function(input, output, session) {
# Render the plot
output$plot = renderPlot({
# Plot the data with x/y vars indicated by the caller.
ggplot(data, aes_string(xvar, yvar)) + geom_point()
})
# Handle the Done button being pressed.
observeEvent(input$done, {
# create id for data
data$id = 1:nrow(data)
# Return the brushed points. See ?shiny::brushedPoints.
p = brushedPoints(data, input$brush)
# create vector of ids that match brushed points and data
g = which(p$id %in% data$id)
# return a subset of the original data without brushed points
stopApp(data[-g,])
})
}
runGadget(ui, server)
}
# run to open plot viewer
# click and drag to brush
# press done return a subset of the original data without brushed points
library(gapminder)
outlier_rm(gapminder, "lifeExp", "gdpPercap")
# you can also use the same method above but pass the output into a dplyr pipe syntax
# without the selection what is the mean life expectancy by country?
library(dplyr)
outlier_rm(gapminder, "lifeExp", "gdpPercap") %>%
group_by(country) %>%
summarise(mean(lifeExp))
# http://apps.bioconnector.virginia.edu/names/
library(shiny)
library(ggplot2)
library(ggthemes)
library(babynames)
library(scales)
options(scipen=999)
ui = fluidPage(titlePanel(title = "names (1880-2012)"),
textInput("name", "enter a name"),
actionButton("go", "search"),
plotOutput("plot1", brush = "plot_brush"),
plotOutput("plot2"),
htmlOutput("info")
)
server = function(input, output) {
dat = eventReactive(input$go, {
subset(babynames, tolower(name) == tolower(input$name))
})
output$plot1 = renderPlot({
ggplot(dat(), aes(year, prop, col=sex)) +
geom_line() +
xlim(1880,2012) +
theme_minimal() +
# format labels with percent function from scales package
scale_y_continuous(labels = percent) +
labs(list(title ="% of individuals born with name by year and gender",
x = "\n click-and-drag over the plot to 'zoom'",
y = ""))
})
output$plot2 = renderPlot({
# need latest version of shiny to use req() function
req(input$plot_brush)
brushed = brushedPoints(dat(), input$plot_brush)
ggplot(brushed, aes(year, prop, col=sex)) +
geom_line() +
theme_minimal() +
# format labels with percent function from scales package
scale_y_continuous(labels = percent) +
labs(list(title ="% of individuals born with name by year and gender",
x = "",
y = ""))
})
output$info = renderText({
"data source: social security administration names from babynames package
"
})
}
shinyApp(ui, server)
install.packages("babynames")
# http://apps.bioconnector.virginia.edu/names/
library(shiny)
library(ggplot2)
library(ggthemes)
library(babynames)
library(scales)
options(scipen=999)
ui = fluidPage(titlePanel(title = "names (1880-2012)"),
textInput("name", "enter a name"),
actionButton("go", "search"),
plotOutput("plot1", brush = "plot_brush"),
plotOutput("plot2"),
htmlOutput("info")
)
server = function(input, output) {
dat = eventReactive(input$go, {
subset(babynames, tolower(name) == tolower(input$name))
})
output$plot1 = renderPlot({
ggplot(dat(), aes(year, prop, col=sex)) +
geom_line() +
xlim(1880,2012) +
theme_minimal() +
# format labels with percent function from scales package
scale_y_continuous(labels = percent) +
labs(list(title ="% of individuals born with name by year and gender",
x = "\n click-and-drag over the plot to 'zoom'",
y = ""))
})
output$plot2 = renderPlot({
# need latest version of shiny to use req() function
req(input$plot_brush)
brushed = brushedPoints(dat(), input$plot_brush)
ggplot(brushed, aes(year, prop, col=sex)) +
geom_line() +
theme_minimal() +
# format labels with percent function from scales package
scale_y_continuous(labels = percent) +
labs(list(title ="% of individuals born with name by year and gender",
x = "",
y = ""))
})
output$info = renderText({
"data source: social security administration names from babynames package
"
})
}
shinyApp(ui, server)
shiny::runApp('Downloads')
setwd("~/Downloads")
shiny::runApp()
crimes <- read.csv("crime_data.csv", header = T)
glimpse(crimes)
crimes <- read.csv("crime_data.csv", header = T)
ui <- shinyUI(fluidPage(
fluidRow(
column(10, offset = 1,
br(),
div(h4(textOutput("title"), align = "center"), style = "color:black"),
br(),
br(),
dygraphOutput("dygraph", height = 200),
br(),
br(),
uiOutput("category", align = "center")
))))
server <- function(input, output) {
output$category <- renderUI({
selectInput("category", "Select a crime category:",
choices = levels(crimes$category),
selected = "Robbery")
})
selected <- reactive({crimes %>%
filter(category == input$category) %>%
group_by(date) %>%
summarise(n = n())})
output$title <- renderText({
paste0(input$category, " offences in Greater Manchester")
})
output$dygraph <- renderDygraph({
crime_xts <- xts(selected()$n, order.by = as.Date(selected()$date, format = "%Y-%m-%d"), frequency = 12)
dygraph(crime_xts, ylab = "Frequency") %>%
dySeries(label = "Crimes", color = "#3182bd", fillGraph = TRUE, strokeWidth = 3, drawPoints = TRUE, pointSize = 6) %>%
dyOptions(includeZero = TRUE, drawGrid = FALSE,
axisLineWidth = 2, axisLabelFontSize = 12) %>%
dyLegend(show = "follow") %>%
dyCSS("dygraph.css")
})
}
shinyApp(ui, server)
crimes <- read.csv("crime_data.csv", header = T)
crimes$date <- as.Date(crimes$date, format = "%Y-%m-%d")
shiny::runApp()
crimes <- read.csv("crime_data.csv", header = T)
str(crimes)
shiny::runApp()
library(shiny)
runGitHub("cat-lord/crime_analysis", subdir = "shinyapps/time_series/")
runGitHub("cat-lord/crime_analysis", subdir = "shinyapps/time_series/")
runGitHub("cat-lord/crime_analysis", subdir = "shinyapps/advanced_choropleth_map/")
runGitHub("cat-lord/crime_analysis", subdir = "shinyapps/bar_charts/")
runGitHub("cat-lord/crime_analysis", subdir = "shinyapps/bar_charts/")
## Heatmap ##
# Load the necessary packages
library(dplyr)
library(tidyr)
# Set your working directory to where the crime data are stored
setwd("../")
# Read the data
crimes <- read.csv("crime_data.csv", header = T)
## Using ggplot2
library(ggplot2)
df <- crimes %>%
filter(borough == "Manchester") %>%
group_by(category, date) %>%
summarise(n = n())
ggplot(df, aes(x=category, y=date, fill=n)) +
geom_tile(aes(fill=n)) +
geom_text(aes(label=n), size=4, color="black") +
scale_x_discrete("", expand = c(0,0)) +
scale_y_discrete("", expand = c(0,-2)) +
scale_fill_gradient("Frequency", low = "white", high = "steelblue") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(axis.text=element_text(size=12)) +
theme(legend.position="none") +
ggtitle("Crime levels in Manchester by month\n") +
theme(plot.title = element_text(face="bold", size="20"))
ggsave("calendar_heatmap.png", scale = 1, dpi = 300)
library(d3heatmap)
df <- crimes %>%
filter(borough == "Manchester") %>%
group_by(category, date) %>%
summarise(n = n()) %>%
spread(date, n, fill = 0)
row.names(df) <- df$category
df$category <- NULL
d3heatmap(df, scale="column", dendrogram = "none",
color = scales::col_quantile("Blues", NULL, 5),
# color = scales::col_bin("Blues", NULL, bins = 7, pretty = TRUE, na.color = "#808080"),
xaxis_font_size = 10, yaxis_font_size = 10)
df <- crimes %>%
filter(category == "Burglary") %>%
group_by(borough) %>%
summarise(n = n()) %>%
ungroup() %>%
arrange(desc(n))
ggplot(df, aes(x = reorder(borough, n), y = n)) +
geom_point(size = 12, stat = "identity", color = "black") +
geom_text(aes(label = n, fontface = "bold"), color = "white", size = 4) +
coord_flip() +
theme_minimal(base_size = 20) +
xlab("") + ylab("") +
ggtitle("Burglary offences in Greater Manchester") +
scale_y_continuous(limits=c(0,max(df$n)))
ggsave("dotplot.png", scale = 1.5, dpi = 300)
download.file("https://raw.github.com/cat-lord/crime_analysis/master/sample_data/crime_data.csv",
destfile = "~/crime_data.csv", method = "curl")
setwd("~/")
crimes <- read.csv("crime_data.csv", header = T)
glimpse(crimes)
shiny::runApp('Desktop/cumulative_time_series')
shiny::runApp('Desktop/cumulative_time_series')
shiny::runApp('Desktop/cumulative_time_series')
shiny::runApp('Desktop/cumulative_time_series')
shiny::runApp('Desktop/cumulative_time_series')
shiny::runApp('Desktop/cumulative_time_series')
shiny::runApp('Desktop/cumulative_time_series')
shiny::runApp('Desktop/cumulative_time_series')
shiny::runApp('Desktop/cumulative_time_series')
shiny::runApp('Desktop/cumulative_time_series')
shiny::runApp('Desktop/cumulative_time_series')
View(data)
data  <- read.csv("temp.csv", header = T)
setwd("~/Desktop/cumulative_time_series")
data  <- read.csv("temp.csv", header = T)
View(data)
library(lubridate); library(dplyr) ; library(tidyr) ; library(dygraphs) ; library(xts) ;
library(htmlwidgets)
glimpse(data)
data$data <- as.Date(data$date, format = '%Y-%m-%d')
glimpse(data)
data$date <- as.Date(data$date, format = '%Y-%m-%d')
glimpse(data)
shiny::runApp()
data$year <- as.numeric(format(as.Date(data$date), format="%Y"))
data$month <- as.numeric(format(as.Date(data$date), format="%m"))
glimpse(data)
shiny::runApp()
